---
defaultBaseImageVersion: latest
properties:
- name: IBM_CLOUD_API_KEY
  value: ${API_KEY}
  type: secure
- name: APP_NAME
  value: ${CF_APP_NAME}
  type: text
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Fetch code
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |+
      #!/bin/bash
      # set -x

      # Git repo cloned at $WORKING_DIR, copy into $ARCHIVE_DIR
      mkdir -p $ARCHIVE_DIR
      cp -R -n ./ $ARCHIVE_DIR/ || true

      # Record git info
      echo "GIT_URL=${GIT_URL}" >> $ARCHIVE_DIR/build.properties
      echo "GIT_BRANCH=${GIT_BRANCH}" >> $ARCHIVE_DIR/build.properties
      echo "GIT_COMMIT=${GIT_COMMIT}" >> $ARCHIVE_DIR/build.properties
      echo "SOURCE_BUILD_NUMBER=${BUILD_NUMBER}" >> $ARCHIVE_DIR/build.properties
      cat $ARCHIVE_DIR/build.properties

      # check if doi is integrated in this toolchain
      if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
        # Record build information
        ibmcloud login --apikey ${IBM_CLOUD_API_KEY} --no-region
        ibmcloud doi publishbuildrecord --branch ${GIT_BRANCH} --repositoryurl ${GIT_URL} --commitid ${GIT_COMMIT} \
          --buildnumber ${BUILD_NUMBER} --logicalappname ${APP_NAME} --status pass
      fi
  - name: Unit Tests
    type: tester
    script: |-
      #!/bin/bash
      # set -x
      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi
      if [ -f ./test/run-tests.sh ]; then
        source ./test/run-tests.sh
        ibmcloud login --apikey $IBM_CLOUD_API_KEY --no-region
        IFS=';' read -ra locations <<< "$FILE_LOCATIONS"
        IFS=';' read -ra types <<< "$TEST_TYPES"
        if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
          for i in "${!locations[@]}"
          do
            echo "$i ${locations[i]} ${types[i]}"
            ibmcloud doi publishtestrecord --logicalappname="$APP_NAME" --buildnumber=$BUILD_NUMBER --filelocation=${locations[i]} --type=${types[i]}
          done
        fi
      else
        echo "Test runner script not found: ./test/run-tests.sh"
      fi
  - name: Build
    type: builder
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  jobs:
  - name: Rolling Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      # Push app
      if ! cf app "$CF_APP"; then  
        cf push "$CF_APP"
      else
        OLD_CF_APP="${CF_APP}-OLD-$(date +"%s")"
        rollback() {
          set +e  
          if cf app "$OLD_CF_APP"; then
            cf logs "$CF_APP" --recent
            cf delete "$CF_APP" -f
            cf rename "$OLD_CF_APP" "$CF_APP"
          fi
          exit 1
        }
        set -e
        trap rollback ERR
        cf rename "$CF_APP" "$OLD_CF_APP"
        cf push "$CF_APP"
        cf delete "$OLD_CF_APP" -f
      fi
      # Export app name and URL for use in later Pipeline jobs
      export CF_APP_NAME="$CF_APP"
      export APP_URL=http://$(cf app $CF_APP_NAME | grep -e urls: -e routes: | awk '{print $2}')
      # View logs
      #cf logs "${CF_APP}" --recent
      
